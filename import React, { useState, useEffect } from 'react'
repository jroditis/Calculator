import React, { useState, useEffect } from 'react';

const Calculator = () => {
  const [display, setDisplay] = useState('0');
  const [previousValue, setPreviousValue] = useState(null);
  const [operation, setOperation] = useState(null);
  const [newNumber, setNewNumber] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const handleKeyPress = (event) => {
      // Numbers
      if (/[0-9]/.test(event.key)) {
        handleNumber(parseInt(event.key));
      }
      // Operations
      switch (event.key) {
        case '+':
          handleOperation('+');
          break;
        case '-':
          handleOperation('-');
          break;
        case '*':
        case 'x':
          handleOperation('x');
          break;
        case '/':
          handleOperation('÷');
          break;
        case '.':
          handleDecimal();
          break;
        case 'Enter':
        case '=':
          handleEquals();
          break;
        case 'Escape':
          handleClear();
          break;
        default:
          break;
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [display, previousValue, operation]); // Dependencies for the effect

  const handleNumber = (num) => {
    if (error) setError('');
    if (newNumber) {
      setDisplay(num.toString());
      setNewNumber(false);
    } else {
      setDisplay(display === '0' ? num.toString() : display + num);
    }
  };

  const handleDecimal = () => {
    if (error) setError('');
    if (newNumber) {
      setDisplay('0.');
      setNewNumber(false);
    } else if (!display.includes('.')) {
      setDisplay(display + '.');
    }
  };

  const handleOperation = (op) => {
    if (error) setError('');
    const current = parseFloat(display);
    
    if (previousValue === null) {
      setPreviousValue(current);
    } else if (operation) {
      const result = calculate(previousValue, current, operation);
      if (result === 'ERROR') return;
      setPreviousValue(result);
      setDisplay(result.toString());
    }
    
    setOperation(op);
    setNewNumber(true);
  };

  const calculate = (a, b, op) => {
    let result;
    switch (op) {
      case '+':
        result = a + b;
        break;
      case '-':
        result = a - b;
        break;
      case 'x':
        result = a * b;
        break;
      case '÷':
        if (b === 0) {
          setError('Cannot divide by zero');
          setDisplay('Error');
          setPreviousValue(null);
          setOperation(null);
          setNewNumber(true);
          return 'ERROR';
        }
        result = a / b;
        break;
      default:
        return b;
    }
    return Math.round(result * 1000000) / 1000000; // Handle floating point precision
  };

  const handleEquals = () => {
    if (error) setError('');
    const current = parseFloat(display);
    if (previousValue !== null && operation) {
      const result = calculate(previousValue, current, operation);
      if (result === 'ERROR') return;
      setDisplay(result.toString());
      setPreviousValue(null);
      setOperation(null);
      setNewNumber(true);
    }
  };

  const handleClear = () => {
    setDisplay('0');
    setPreviousValue(null);
    setOperation(null);
    setNewNumber(true);
    setError('');
  };

  const handlePi = () => {
    if (error) setError('');
    setDisplay(Math.PI.toString());
    setNewNumber(true);
  };

  const handlePercent = () => {
    if (error) setError('');
    const current = parseFloat(display);
    setDisplay((current / 100).toString());
  };

  const handlePlusMinus = () => {
    if (error) setError('');
    setDisplay((parseFloat(display) * -1).toString());
  };

  return (
    <div className="w-64 bg-blue-100 p-4 rounded-lg shadow-lg">
      {/* Display */}
      <div className="bg-white mb-4 p-2 text-right rounded h-12 overflow-hidden relative">
        {error && <div className="text-red-500 text-sm absolute top-0 left-2">{error}</div>}
        <span className="text-2xl">{display}</span>
      </div>

      {/* Keypad */}
      <div className="grid grid-cols-4 gap-2">
        {/* Row 1 */}
        <button onClick={() => handleNumber(1)} className="bg-cyan-100 p-2 rounded hover:bg-cyan-200">1</button>
        <button onClick={() => handleNumber(2)} className="bg-cyan-100 p-2 rounded hover:bg-cyan-200">2</button>
        <button onClick={() => handleNumber(3)} className="bg-cyan-100 p-2 rounded hover:bg-cyan-200">3</button>
        <button onClick={() => handleOperation('x')} className="bg-purple-200 p-2 rounded hover:bg-purple-300">x</button>

        {/* Row 2 */}
        <button onClick={() => handleNumber(4)} className="bg-cyan-100 p-2 rounded hover:bg-cyan-200">4</button>
        <button onClick={() => handleNumber(5)} className="bg-cyan-100 p-2 rounded hover:bg-cyan-200">5</button>
        <button onClick={() => handleNumber(6)} className="bg-cyan-100 p-2 rounded hover:bg-cyan-200">6</button>
        <button onClick={() => handleOperation('÷')} className="bg-purple-200 p-2 rounded hover:bg-purple-300">÷</button>

        {/* Row 3 */}
        <button onClick={() => handleNumber(7)} className="bg-cyan-100 p-2 rounded hover:bg-cyan-200">7</button>
        <button onClick={() => handleNumber(8)} className="bg-cyan-100 p-2 rounded hover:bg-cyan-200">8</button>
        <button onClick={() => handleNumber(9)} className="bg-cyan-100 p-2 rounded hover:bg-cyan-200">9</button>
        <button onClick={() => handleOperation('-')} className="bg-purple-200 p-2 rounded hover:bg-purple-300">-</button>

        {/* Row 4 */}
        <button onClick={handlePlusMinus} className="bg-blue-200 p-2 rounded hover:bg-blue-300">+/-</button>
        <button onClick={handlePi} className="bg-blue-200 p-2 rounded hover:bg-blue-300">π</button>
        <button onClick={handlePercent} className="bg-blue-200 p-2 rounded hover:bg-blue-300">%</button>
        <button onClick={() => handleOperation('+')} className="bg-purple-200 p-2 rounded hover:bg-purple-300">+</button>

        {/* Row 5 */}
        <button onClick={handleClear} className="bg-green-200 p-2 rounded hover:bg-green-300">C</button>
        <button onClick={() => handleNumber(0)} className="bg-cyan-100 p-2 rounded hover:bg-cyan-200">0</button>
        <button onClick={handleDecimal} className="bg-blue-200 p-2 rounded hover:bg-blue-300">.</button>
        <button onClick={handleEquals} className="bg-green-200 p-2 rounded hover:bg-green-300">=</button>
      </div>
    </div>
  );
};

export default Calculator;
